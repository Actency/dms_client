<?php
 /**
 * Implements hook_menu().
 */
function dms_client_menu() {
  // Report page
  $items['admin/reports/dms'] = array(
    'title' => 'DMS Report',
    'page callback' => 'dms_client_report_callback',
		'access callback' => TRUE
  );

	// Module settings
  $items['admin/config/system/dms_client/settings'] = array(
    'title' => 'DMS Client Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dms_client_settings_form'),
    'file' => 'dms_client.admin.inc',
		'access callback' => TRUE
  );
  // Actions
  $items['dms-action/cron-run'] = array(
    'title' => 'CRON run from dms call',
    'page callback' => 'dms_client_cron_run',
    'access callback' => TRUE,
		'type' => MENU_CALLBACK
  );
  $items['dms-action/cache-clear'] = array(
    'title' => 'Cache clear from dms call',
    'page callback' => 'dms_client_cache_clear',
    'access callback' => TRUE,
		'type' => MENU_CALLBACK
  );
	return $items;
}	

 /**
 * Menu callback
 */
function dms_client_report_callback() {
	$plugins = dms_client_load_includes();
	
	$response = array(
		'code' => -1
	);
	
  // Request analysis
  $params = drupal_get_query_parameters();
  $req_valid = dms_client_valid_request($params);
  
  // Available modes (default: 'light')
  $arr_modes = array('light', 'full', 'specific');
  $req_mode = 'light';
  if (array_key_exists('mode', $params) && in_array($params['mode'], $arr_modes)) {
    $req_mode = $params['mode'];
  }
	if ($req_valid) {
		$response['code'] = 1;
    $response['system_status'] = dms_client_system_status($req_mode == 'light');
    
    foreach ($plugins as $plugin) {
			if ($req_mode == 'full' || in_array($plugin, $params['checklist'])) {
				if (($report_callback = $plugin.'_dms_client_report') && function_exists($report_callback)) {
					if (empty($params['params'])) $params['params'] = array();
						$ret = call_user_func_array($plugin.'_dms_client_report', $params['params']);
						if (empty($ret['errors'])) $response[$plugin] = $ret;
						else $response['errors'][$plugin] = $ret['errors'];
				}
				else {
					$response['errors'][$plugin]=t('function %function does not exist', array('%function'=>$report_callback));
				}
	    }
	  }
  }
  
  drupal_add_http_header('Content-Type', 'application/json');
	drupal_add_http_header('Access-Control-Allow-Origin', "*");
	drupal_add_http_header('Access-Control-Allow-Methods', 'GET,POST');
	echo json_encode($response);
}

/**
 * Menu callback
 */
function dms_client_cron_run() {
  return array(
    'code' => drupal_cron_run() ? 1 : -1
  );
}

/**
 * Menu callback
 */
function dms_client_cache_clear() {
  return array(
    'code' => drupal_flush_all_caches() ? 1 : -1
);
}

/**
 * Menu callback
 *
 * @param $params
 *   Query parameters
 */
function dms_client_valid_request($params) {
	// If php >= 5.5 we can use password_verify()
  return (array_key_exists('secret', $params) && dms_client_password_verify(variable_get('dms_client_secret', dms_client_generateRandomString()), $params['secret'])) ? TRUE : FALSE;
}

/**
 * Verify a secret
 *
 * @param $pass
 *   The clear secret
 * @param $hash
 *   The hash to match
 */
function dms_client_password_verify($pass, $hash) {
	$expected  = crypt($pass, $pass);
  return $expected == $hash;
}

/**
 * Generate a secret
 *
 * @param $length
 *   The length of the generated secret
 */
function dms_client_generateRandomString($length = 255) {
  $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  $randomString = '';
  for ($i = 0; $i < $length; $i++) {
    $randomString .= $characters[rand(0, strlen($characters) - 1)];
  }
  return $randomString;
}

/**
 * System status (see /modules/system/system.admin.inc)
 *
 * @param $check
 *   If true, only returns a boolean whether there are system status errors.
 */
function dms_client_system_status($check = FALSE) {
  // Load .install files
  include_once DRUPAL_ROOT . '/includes/install.inc';
  drupal_load_updates();

  // Check run-time requirements and status information.
  $requirements = module_invoke_all('requirements', 'runtime');
  usort($requirements, '_system_sort_requirements');

  if ($check) {
    return drupal_requirements_severity($requirements) == REQUIREMENT_ERROR;
  }
  return $requirements;
}




function dms_client_get_plugins() {
	return array('features', 'hack', 'queues', 'statistics', 'updates');
}

function dms_client_include($file, $module = 'dms_client', $dir = 'includes') {
	static $used = array();

	$dir = '/' . ($dir ? $dir . '/' : '');
	
	if (!isset($used[$module][$dir][$file])) {
		require_once DRUPAL_ROOT . '/' . drupal_get_path('module', $module) . "$dir$file.inc";
		$used[$module][$dir][$file] = TRUE;
	}
}

function dms_client_load_includes() {
	$plugins = dms_client_get_plugins();
	
	foreach($plugins as $plugin) {
		dms_client_include($plugin);
	}
	
	return $plugins;
}
